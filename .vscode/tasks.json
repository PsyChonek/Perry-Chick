{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Debug Backend",
      "type": "shell",
      "command": "dotnet",
      "args": ["run", "--configuration", "Debug"],
      "options": {
        "cwd": "${workspaceFolder}/backend"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": ["$msCompile"],
      "isBackground": true
    },
    {
      "label": "Debug Frontend",
      "type": "shell",
      "command": "npm",
      "args": ["run", "dev"],
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": [],
      "isBackground": true,
      "dependsOn": ["Install Frontend Dependencies"]
    },
    {
      "label": "Debug Notifications",
      "type": "shell",
      "command": "dotnet",
      "args": ["run", "--configuration", "Debug"],
      "options": {
        "cwd": "${workspaceFolder}/notifications"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": ["$msCompile"],
      "isBackground": true
    },
    {
      "label": "Run All in Minikube",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "Write-Host 'Starting full Minikube deployment with environment variables...' -ForegroundColor Green; Write-Host 'Step 1: Stopping any existing Minikube...' -ForegroundColor Yellow; minikube delete 2>$null; Write-Host 'Step 2: Starting Minikube with network fixes...' -ForegroundColor Yellow; minikube start --driver=docker --dns-domain=cluster.local --extra-config=kubelet.cluster-dns=10.96.0.10 --extra-config=kubelet.cluster-domain=cluster.local --memory=4096 --cpus=2; Write-Host 'Step 3: Running deployment script with environment variables...' -ForegroundColor Yellow; ./scripts/deploy-with-env.ps1 -GenerateSecrets; Write-Host 'Deployment complete! ðŸŽ‰' -ForegroundColor Green"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Stop Minikube Services",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-Command",
        "Write-Host 'Stopping Perry Chick services...' -ForegroundColor Yellow; kubectl delete -f ./k8s/deploy.yaml; Write-Host 'Cleaning up ConfigMaps and Secrets...' -ForegroundColor Yellow; kubectl delete configmap perrychick-config --ignore-not-found=true; kubectl delete secret perrychick-secrets --ignore-not-found=true; Write-Host 'All services stopped and cleaned up!' -ForegroundColor Green"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Check Pod Status",
      "type": "shell",
      "command": "kubectl",
      "args": ["get", "pods", "-o", "wide"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Open Kubernetes Dashboard",
      "type": "shell",
      "command": "minikube",
      "args": ["dashboard"],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": [],
      "isBackground": true
    },
    {
      "label": "Deploy Full Application",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "./scripts/deploy-with-env.ps1",
        "-GenerateSecrets"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Update Deployment",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-Command",
        "Write-Host 'Updating deployment...' -ForegroundColor Green; ./scripts/generate-secrets.ps1; kubectl apply -f ./k8s/configmap.yaml; kubectl apply -f ./k8s/secrets-generated.yaml; kubectl apply -f ./k8s/deploy.yaml; Write-Host 'Deployment updated!' -ForegroundColor Green"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Forward All Services & Show URLs",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "./scripts/forward-all-services.ps1"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": [],
      "isBackground": true
    },
    {
      "label": "Stop Port Forwarding",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-Command",
        "Write-Host 'Stopping all port forwarding jobs...' -ForegroundColor Yellow; Get-Job | Stop-Job; Get-Job | Remove-Job; Write-Host 'All port forwarding stopped!' -ForegroundColor Green"
      ],
      "group": "test",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Install Frontend Dependencies",
      "type": "shell",
      "command": "npm",
      "args": ["install"],
      "options": {
        "cwd": "${workspaceFolder}/frontend"
      },
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      },
      "problemMatcher": []
    },
    {
      "label": "Create Dashboard ConfigMap",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "./scripts/create-dashboard-configmap.ps1"
      ],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": true,
        "panel": "new"
      }
    }
  ]
}
