# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15
          env:
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: POSTGRES_DB
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: POSTGRES_PASSWORD
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: postgres-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
  type: ClusterIP
---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          command: ["redis-server", "--requirepass", "$(REDIS_PASSWORD)"]
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: REDIS_PASSWORD
          ports:
            - containerPort: 6379
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---

---
# Keycloak Realm Configuration
# NOTE: This ConfigMap should be created from perrychick-realm-local.json
# Use: kubectl create configmap keycloak-realm-config --from-file=realm.json=perrychick-realm-local.json
# Or run: .\scripts\update-env-config.ps1 -Apply to generate automatically
---
# Keycloak Authentication
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  labels:
    app: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:23.0
          args: ["start-dev", "--import-realm"]
          env:
            - name: KC_ADMIN
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_ADMIN
            - name: KC_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: KC_ADMIN_PASSWORD
            - name: KC_DB
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_DB
            - name: KC_DB_URL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_DB_URL
            - name: KC_DB_USERNAME
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_DB_USERNAME
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: KC_DB_PASSWORD
            - name: KC_HTTP_CORS_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_HTTP_CORS_ENABLED
            - name: KC_HTTP_CORS_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_HTTP_CORS_ORIGINS
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: realm-config
              mountPath: /opt/keycloak/data/import
              readOnly: true
          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
      volumes:
        - name: realm-config
          configMap:
            name: keycloak-realm-config
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak
spec:
  selector:
    app: keycloak
  ports:
    - port: 8080
      targetPort: 8080
  type: LoadBalancer
---
# Perry Chick Backend API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: perrychick-backend
  labels:
    app: perrychick-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perrychick-backend
  template:
    metadata:
      labels:
        app: perrychick-backend
    spec:
      containers:
        - name: backend
          image: perrychick-backend:latest
          imagePullPolicy: Never
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: DATABASE_URL
            - name: FRONTEND_URL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: FRONTEND_URL
            - name: KC_AUTHORITY_URL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_AUTHORITY_URL
            - name: KC_ISSUERS_URL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_ISSUERS_URL
            - name: KC_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: KC_CLIENT_ID
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: REDIS_URL
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: REDIS_PASSWORD
            - name: ASPNETCORE_ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: ASPNETCORE_ENVIRONMENT
            - name: CORS_ALLOWED_ORIGINS
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: CORS_ALLOWED_ORIGINS
            - name: CORS_ALLOWED_METHODS
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: CORS_ALLOWED_METHODS
            - name: CORS_ALLOWED_HEADERS
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: CORS_ALLOWED_HEADERS
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: perrychick-backend
spec:
  selector:
    app: perrychick-backend
  ports:
    - port: 5000
      targetPort: 8080
  type: ClusterIP
---
# Perry Chick Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: perrychick-frontend
  labels:
    app: perrychick-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perrychick-frontend
  template:
    metadata:
      labels:
        app: perrychick-frontend
    spec:
      containers:
        - name: frontend
          image: perrychick-frontend:latest
          imagePullPolicy: Never
          env:
            - name: VITE_API_BASE_URL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: VITE_API_BASE_URL
            - name: VITE_KC_URL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: VITE_KC_URL
            - name: VITE_KC_REALM
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: VITE_KC_REALM
            - name: VITE_KC_CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: VITE_KC_CLIENT_ID
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: perrychick-frontend
spec:
  selector:
    app: perrychick-frontend
  ports:
    - port: 3000
      targetPort: 3000
  type: LoadBalancer
---
# Notifications Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: perrychick-notifications
  labels:
    app: perrychick-notifications
spec:
  replicas: 1
  selector:
    matchLabels:
      app: perrychick-notifications
  template:
    metadata:
      labels:
        app: perrychick-notifications
    spec:
      containers:
        - name: notifications
          image: perrychick-notifications:latest
          imagePullPolicy: Never
          env:
            - name: SENDGRID_API_KEY
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: SENDGRID_API_KEY
            - name: FROM_EMAIL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: FROM_EMAIL
            - name: REDIS_URL
              valueFrom:
                configMapKeyRef:
                  name: perrychick-config
                  key: REDIS_URL
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: REDIS_PASSWORD
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: perrychick-notifications
spec:
  selector:
    app: perrychick-notifications
  ports:
    - port: 5003
      targetPort: 8080
  type: ClusterIP
---
# Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:v2.48.0
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--web.enable-lifecycle"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus
          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "1000m"
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          emptyDir: {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
      - job_name: 'perry-chick-backend'
        static_configs:
          - targets: ['perrychick-backend:5000']
      - job_name: 'perry-chick-notifications'
        static_configs:
          - targets: ['perrychick-notifications:5003']
      - job_name: 'keycloak'
        static_configs:
          - targets: ['keycloak:8080']
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
  type: ClusterIP
---
# OpenTelemetry Collector
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  labels:
    app: otel-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-collector
  template:
    metadata:
      labels:
        app: otel-collector
    spec:
      containers:
        - name: otel-collector
          image: otel/opentelemetry-collector-contrib:0.89.0
          command: ["/otelcol-contrib"]
          args: ["--config=/etc/otel-collector-config.yaml"]
          ports:
            - containerPort: 4317 # OTLP gRPC receiver
            - containerPort: 4318 # OTLP HTTP receiver
            - containerPort: 8888 # Prometheus metrics
            - containerPort: 8889 # Prometheus exporter
          volumeMounts:
            - name: otel-collector-config
              mountPath: /etc/otel-collector-config.yaml
              subPath: otel-collector-config.yaml
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: otel-collector-config
          configMap:
            name: otel-collector-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-collector-config
data:
  otel-collector-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    processors:
      batch:
    exporters:
      otlp/jaeger:
        endpoint: jaeger-collector:14250
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:8889"
    service:
      pipelines:
        traces:
          receivers: [otlp]
          processors: [batch]
          exporters: [otlp/jaeger]
        metrics:
          receivers: [otlp]
          processors: [batch]
          exporters: [prometheus]
---
apiVersion: v1
kind: Service
metadata:
  name: otel-collector
spec:
  selector:
    app: otel-collector
  ports:
    - name: grpc
      port: 4317
      targetPort: 4317
    - name: http
      port: 4318
      targetPort: 4318
    - name: metrics
      port: 8888
      targetPort: 8888
    - name: prometheus
      port: 8889
      targetPort: 8889
  type: ClusterIP
---
# Jaeger
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger
  labels:
    app: jaeger
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
  template:
    metadata:
      labels:
        app: jaeger
    spec:
      containers:
        - name: jaeger
          image: jaegertracing/all-in-one:1.51
          env:
            - name: COLLECTOR_OTLP_ENABLED
              value: "true"
          ports:
            - containerPort: 16686 # Jaeger UI
            - containerPort: 14250 # gRPC
            - containerPort: 14268 # HTTP
            - containerPort: 6832 # UDP
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
spec:
  selector:
    app: jaeger
  ports:
    - name: ui
      port: 16686
      targetPort: 16686
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
spec:
  selector:
    app: jaeger
  ports:
    - name: grpc
      port: 14250
      targetPort: 14250
    - name: http
      port: 14268
      targetPort: 14268
    - name: udp
      port: 6832
      targetPort: 6832
      protocol: UDP
  type: ClusterIP
---
# Grafana
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.2.0
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: perrychick-secrets
                  key: GRAFANA_ADMIN_PASSWORD
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-datasources
          configMap:
            name: grafana-provisioning
            items:
              - key: datasources.yaml
                path: datasources.yaml
        - name: grafana-dashboards-config
          configMap:
            name: grafana-provisioning
            items:
              - key: dashboards.yaml
                path: dashboards.yaml
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
        isDefault: true
        uid: prometheus
      - name: Jaeger
        type: jaeger
        url: http://jaeger-query:16686
        access: proxy
        uid: jaeger
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'Perry Chick Dashboards'
        orgId: 1
        folder: 'Perry Chick'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
# NOTE: Grafana Dashboard ConfigMap is managed separately
# Run 'scripts/deploy-with-dashboards.ps1' to deploy with dashboards from separate files
# Or manually create: kubectl create configmap grafana-dashboards --from-file=monitoring/grafana/dashboards/
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
  type: ClusterIP
