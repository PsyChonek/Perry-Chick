/* tslint:disable */
/* eslint-disable */
/**
 * Perry Chick API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
    UserToJSONTyped,
} from './User';

/**
 * 
 * @export
 * @interface Chick
 */
export interface Chick {
    /**
     * 
     * @type {number}
     * @memberof Chick
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Chick
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Chick
     */
    breed?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Chick
     */
    hatchDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Chick
     */
    color?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Chick
     */
    weight?: number;
    /**
     * 
     * @type {number}
     * @memberof Chick
     */
    userId?: number;
    /**
     * 
     * @type {User}
     * @memberof Chick
     */
    user?: User;
    /**
     * 
     * @type {Date}
     * @memberof Chick
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Chick
     */
    updatedAt?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof Chick
     */
    isActive?: boolean;
}

/**
 * Check if a given object implements the Chick interface.
 */
export function instanceOfChick(value: object): value is Chick {
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function ChickFromJSON(json: any): Chick {
    return ChickFromJSONTyped(json, false);
}

export function ChickFromJSONTyped(json: any, ignoreDiscriminator: boolean): Chick {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'],
        'breed': json['breed'] == null ? undefined : json['breed'],
        'hatchDate': json['hatchDate'] == null ? undefined : (new Date(json['hatchDate'])),
        'color': json['color'] == null ? undefined : json['color'],
        'weight': json['weight'] == null ? undefined : json['weight'],
        'userId': json['userId'] == null ? undefined : json['userId'],
        'user': json['user'] == null ? undefined : UserFromJSON(json['user']),
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'isActive': json['isActive'] == null ? undefined : json['isActive'],
    };
}

export function ChickToJSON(json: any): Chick {
    return ChickToJSONTyped(json, false);
}

export function ChickToJSONTyped(value?: Chick | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'breed': value['breed'],
        'hatchDate': value['hatchDate'] == null ? undefined : ((value['hatchDate']).toISOString()),
        'color': value['color'],
        'weight': value['weight'],
        'userId': value['userId'],
        'user': UserToJSON(value['user']),
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] === null ? null : ((value['updatedAt'] as any)?.toISOString()),
        'isActive': value['isActive'],
    };
}

