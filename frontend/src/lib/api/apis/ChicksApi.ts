/* tslint:disable */
/* eslint-disable */
/**
 * Perry Chick API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Chick,
} from '../models/index';
import {
    ChickFromJSON,
    ChickToJSON,
} from '../models/index';

export interface CreateChickRequest {
    chick: Chick;
}

export interface DeleteChickRequest {
    id: number;
}

export interface GetChickRequest {
    id: number;
}

export interface GetChicksByUserRequest {
    userId: number;
}

export interface UpdateChickRequest {
    id: number;
    chick: Chick;
}

/**
 * 
 */
export class ChicksApi extends runtime.BaseAPI {

    /**
     */
    async createChickRaw(requestParameters: CreateChickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chick'] == null) {
            throw new runtime.RequiredError(
                'chick',
                'Required parameter "chick" was null or undefined when calling createChick().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/chicks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChickToJSON(requestParameters['chick']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createChick(requestParameters: CreateChickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createChickRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteChickRaw(requestParameters: DeleteChickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteChick().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/chicks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteChick(requestParameters: DeleteChickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteChickRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getChickRaw(requestParameters: GetChickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getChick().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/chicks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getChick(requestParameters: GetChickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getChickRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getChicksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Chick>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/chicks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChickFromJSON));
    }

    /**
     */
    async getChicks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Chick>> {
        const response = await this.getChicksRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getChicksByUserRaw(requestParameters: GetChicksByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Chick>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getChicksByUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/users/{userId}/chicks`;
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChickFromJSON));
    }

    /**
     */
    async getChicksByUser(requestParameters: GetChicksByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Chick>> {
        const response = await this.getChicksByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateChickRaw(requestParameters: UpdateChickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateChick().'
            );
        }

        if (requestParameters['chick'] == null) {
            throw new runtime.RequiredError(
                'chick',
                'Required parameter "chick" was null or undefined when calling updateChick().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/chicks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChickToJSON(requestParameters['chick']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateChick(requestParameters: UpdateChickRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateChickRaw(requestParameters, initOverrides);
    }

}
