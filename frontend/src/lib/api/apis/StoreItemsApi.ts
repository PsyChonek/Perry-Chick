/* tslint:disable */
/* eslint-disable */
/**
 * Perry Chick API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StoreItem,
} from '../models/index';
import {
    StoreItemFromJSON,
    StoreItemToJSON,
} from '../models/index';

export interface CreateStoreItemRequest {
    storeItem: StoreItem;
}

export interface DeleteStoreItemRequest {
    id: number;
}

export interface GetStoreItemRequest {
    id: number;
}

export interface UpdateStoreItemRequest {
    id: number;
    storeItem: StoreItem;
}

/**
 * 
 */
export class StoreItemsApi extends runtime.BaseAPI {

    /**
     */
    async createStoreItemRaw(requestParameters: CreateStoreItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['storeItem'] == null) {
            throw new runtime.RequiredError(
                'storeItem',
                'Required parameter "storeItem" was null or undefined when calling createStoreItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/items`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreItemToJSON(requestParameters['storeItem']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createStoreItem(requestParameters: CreateStoreItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createStoreItemRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteStoreItemRaw(requestParameters: DeleteStoreItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteStoreItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteStoreItem(requestParameters: DeleteStoreItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStoreItemRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getStoreItemRaw(requestParameters: GetStoreItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getStoreItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getStoreItem(requestParameters: GetStoreItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getStoreItemRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getStoreItemsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<StoreItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/items`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StoreItemFromJSON));
    }

    /**
     */
    async getStoreItems(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<StoreItem>> {
        const response = await this.getStoreItemsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateStoreItemRaw(requestParameters: UpdateStoreItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateStoreItem().'
            );
        }

        if (requestParameters['storeItem'] == null) {
            throw new runtime.RequiredError(
                'storeItem',
                'Required parameter "storeItem" was null or undefined when calling updateStoreItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/items/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoreItemToJSON(requestParameters['storeItem']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateStoreItem(requestParameters: UpdateStoreItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateStoreItemRaw(requestParameters, initOverrides);
    }

}
